{
    "Pact Function":{
        "prefix": "defun",
        "body": [
            "(defun $1 ($2)",
            "@doc \"$3 \"",
            "$4)"
        ],
        "description": "Create a basic function template"
    },
    "Pact Module": {
        "prefix": "module",
        "body": [
            "(module $1 '$2",
            "@doc \"$3 \"",
            "$4)"
        ],
        "description": "Create a basic module template"
    },
    "Pact Schema": {
        "prefix": "defschema",
        "body": [
            "(defschema $1",
            "@doc \"$2 \"",
            "${3:foo}:${4:bar})"
        ],
        "description": "Create a basic schema template"
    },
    "Pact Table": {
        "prefix": "deftable",
        "body": "(deftable ${1:foo}:{${2:bar}})",
        "description": "Create a deftable template"
    },
    "Pact Hello World Example": {
        "prefix": "pacthello",
        "body": [
            "(namespace \"free\")",
            ";;---------------------------------",
            ";;",
            ";;  Create an 'admin-keyset' and add some key, for loading this contract!",
            ";;",
            ";;  Make sure the message is signed with this added key as well.",
            ";;",
            ";;  When deploying new contracts, ensure to use a *unique keyset name*",
            ";;  and *unique module name* from any previously deployed contract",
            ";;",
            ";;",
            ";;---------------------------------",
            " ",
            " ",
            ";; Keysets cannot be created in code, thus we read them in",
            ";; from the load message data.",
            "(define-keyset \"free.admin-keyset\" (read-keyset \"admin-keyset\"))",
            ";; Define the module. The module name must be unique",
            "(module hello-world GOV",
            "  \"A smart contract to greet the world.\"",
            " ",
            ";; Define module governance function",
            "(defcap GOV ()",
            "   (enforce-keyset \"free.admin-keyset\"))",

            "(defun hello (name:string)",
            " \"Do the hello-world dance\"",
            " (format \"Hello {}!\" [name]))",
            ")",
            " ",
            ";; and say hello!",
            "(hello \"world\")"
        ],
        "description": "Create a hello world template"
    },
    "Pact define-keyset": {
        "prefix": "define-keyset",
        "body": "(define-keyset '${1:foo}-keyset (read-keyset \"${2:bar}\"))",
        "description": "Create a basic define-keyset template"
    },
    "Pact enforce-keyset": {
        "prefix": "enforce-keyset",
        "body": "(enforce-keyset '${1:foo}-keyset)",
        "description": "Create a basic enforce-keyset template"
    },
    "Pact read-keyset": {
        "prefix": "read-keyset",
        "body": "(read-keyset \"${1:foo}-keyset\")",
        "description": "Create a basic read-keyset template"
    },
    "Pact keys-2": {
        "prefix": "keys-2",
        "body": "(keys-2 ${1:3} ${2:1})",
        "description": "Create a basic keys-2 template"
    },
    "Pact keys-all": {
        "prefix": "keys-all",
        "body": "(keys-all ${1:3} ${2:3})",
        "description": "Create a basic keys-all template"
    },
    "Pact keys-any": {
        "prefix": "keys-any",
        "body": "(keys-any ${1:10} ${2:1})",
        "description": "Create a basic keys-any template"
    },
    "Pact emit-event": {
        "prefix": "emit-event",
        "body": "(emit-event (TRANSFER \"${1:Bob}\" \"${2:Alice}\" ${3:12.0}))",
        "description": "Create a basic emit-event template"
    },
    "Pact enforce-guard": {
        "prefix": "enforce-guard",
        "body": "(enforce-guard ${1:row}-guard)",
        "description": "Create a basic enforce-guard template"
    },
    "Pact install-capability": {
        "prefix": "install-capability",
        "body": "(install-capability (PAY \"${1:alice}\" \"${2:bob}\" ${3:10.0}))",
        "description": "Create a basic install-capability template"
    },
    "Pact with-capability": {
        "prefix": "with-capability",
        "body": "(with-capability (${1:UPDATE-USERS} ${2:id}) (${3:update users id { salary: new-salary }}))",
        "description": "Create a basic install-capability template"
    },
    
}